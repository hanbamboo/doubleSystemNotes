package com.shuangti.cow;

/*
 * 抽象类是将多个类进一步抽象出来的类
 * 他也有属性和方法
 * （1）属性和普通类一样
 * （2）方法有两种：普通方法、抽象方法
 * 抽象方法没有方法体：修饰符列表 abstract 返回类型 方法名(形参列表);
 * 列如 public abstract void test1();
 * 1.因为类本身是不存在的，类抽象出来的抽象类也就是不能实例化
 * 
 * 2.继承抽象类的普通类是能实例化的，抽象类也有构造方法，但是构造方法是提供给子类使用的。
 * 3.抽象类中的抽象方法，没有方法体，而且如果普通子类继承抽象类，那么抽象类当中的抽象方法必须要被子类重写，不然编译报错。
 * 4.普通类中不可以有抽象方法
 * 5.抽象方法必然在抽象类当中。
 * 6.抽象类也可以继承抽象类，但是肯定也是单继承
 *  抽象类继承了抽象类不需要重写他的父抽象类的方法，但是需要记住普通方法必须要重写父类或它的祖宗类的抽象方法。
 * 抽象类的作用主要体现在他的抽象方法：
 * 主要用来控制实现继承他的子类必须要实现此抽象类的抽象方法。
 * 比如不管是银行卡还是储蓄卡都要有存钱的功能，那么这个时候建议吧存钱的方法写为抽象方法。
 * 
 * */


public class Testo2 {
//	Account account = new Account();//因为类本身是不存在的，类抽象出来的抽象类，也就不能被实例化
	
//	Blank blank = new Blank();//继承抽象类的普通类是能实例化的
	
}
